{"version":3,"sources":["components/BookItem.js","util/operations.js","components/Books.js","components/BookDetails.js","components/AddBook.js","components/EditBook.js","components/Main.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["BookItem","props","react_default","a","createElement","className","Link","to","concat","item","id","title","getAll","JSON","parse","localStorage","getItem","add","save","Object","toConsumableArray","update","map","el","filter","remove","coll","setItem","stringify","Books","state","books","loading","this","setState","loading_msg","console","log","BookItems","book","i","components_BookItem","key","class","Component","BookDetails","details","getBook","BookId","_this","match","params","history","push","onDelete","author","onClick","AddBook","onSubmit","e","newBook","Date","now","toString","value","preventDefault","_this2","type","name","ref","htmlFor","EditBook","handleInputChange","defineProperty","target","getBookDetails","onChange","Main","Switch","Route","exact","path","component","Navbar","App","components_Main","Boolean","window","location","hostname","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59af8248.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst BookItem = props => (\r\n  <li className=\"collection-item listelement\">\r\n    <Link\r\n      className=\"indigo-text text-darken-2 font_links\"\r\n      to={`/books/${props.item.id}`}\r\n    >\r\n      {props.item.title}\r\n    </Link>\r\n  </li>\r\n);\r\n\r\nexport default BookItem;\r\n","const getAll = () => {\r\n  return JSON.parse(localStorage.getItem(\"theCollection\")) || [];\r\n};\r\n\r\nconst add = item => {\r\n  save([...getAll(), item]);\r\n};\r\n\r\nconst update = item => {\r\n  save(getAll().map(el => (el.id === item.id ? item : el)));\r\n};\r\n\r\nconst getItem = id => {\r\n  return getAll().filter(el => el.id === id)[0];\r\n};\r\n\r\nconst remove = id => {\r\n  save(getAll().filter(el => el.id !== id));\r\n};\r\n\r\nconst save = coll => {\r\n  localStorage.setItem(\"theCollection\", JSON.stringify(coll));\r\n};\r\n\r\nexport { getAll, add, update, getItem, remove };\r\n","import React, { Component } from \"react\";\r\nimport BookItem from \"./BookItem\";\r\nimport { getAll } from \"../util/operations\";\r\n\r\nclass Books extends Component {\r\n  state = {\r\n    books: [],\r\n    loading: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ books: getAll(), loading: false });\r\n  }\r\n\r\n  render() {\r\n    const loading_msg = <p>Book is loading</p>;\r\n    console.log(this.state.books);\r\n    const BookItems = this.state.books.map((book, i) => {\r\n      return <BookItem key={i} item={book} />;\r\n    });\r\n    if (this.state.loading) {\r\n      return loading_msg;\r\n    }\r\n    return (\r\n      <div>\r\n        <h1 class=\"book-header indigo-text text-darken-2\">Books</h1>\r\n        <ul className=\"\">{BookItems}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Books;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getItem, remove } from \"../util/operations\";\r\n\r\nclass BookDetails extends Component {\r\n  state = {\r\n    details: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getBook();\r\n  }\r\n\r\n  getBook = () => {\r\n    const BookId = this.props.match.params.id;\r\n    const book = getItem(BookId);\r\n    if (!book) {\r\n      console.log(`error from detail page, no object with ${BookId}`);\r\n      return this.props.history.push(\"/\");\r\n    }\r\n    this.setState({ details: book });\r\n  };\r\n\r\n  onDelete = () => {\r\n    let BookId = this.state.details.id;\r\n    remove(BookId);\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n\r\n        <h5 className=\"grey-text text-darken-2 mt-2\">\r\n          {this.state.details.author}\r\n        </h5>\r\n        <h3>{this.state.details.title}</h3>\r\n\r\n        <Link className=\"btn mr-1\" to={`/books/edit/${this.state.details.id}`}>\r\n          {\" \"}\r\n          Edit\r\n        </Link>\r\n\r\n        <Link className=\"btn grey mr-1\" to=\"/\">\r\n          Back\r\n        </Link>\r\n\r\n        <button onClick={this.onDelete} className=\"btn red\">\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookDetails;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { add } from \"../util/operations\";\r\n\r\nclass AddBook extends Component {\r\n  onSubmit = e => {\r\n    const newBook = {\r\n      id: Date.now().toString(),\r\n      title: this.title.value,\r\n      author: this.author.value\r\n    };\r\n    add(newBook);\r\n    this.props.history.push(\"/\");\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <Link className=\"btn grey\" to=\"/\">\r\n          Back\r\n        </Link>\r\n        <h1>Add Book</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              ref={title => (this.title = title)}\r\n            />\r\n            <label htmlFor=\"title\">Title</label>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"author\"\r\n              ref={author => (this.author = author)}\r\n            />\r\n            <label htmlFor=\"author\">Author</label>\r\n          </div>\r\n          <input type=\"submit\" value=\"Save\" className=\"btn\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddBook;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { update, getItem } from \"../util/operations\";\r\n\r\nclass EditBook extends Component {\r\n  state = {\r\n    id: \"\",\r\n    title: \"\",\r\n    author: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getBookDetails();\r\n  }\r\n\r\n  getBookDetails() {\r\n    let BookId = this.props.match.params.id;\r\n    if (!BookId) {\r\n      return this.props.history.push(\"/\");\r\n    }\r\n    const book = getItem(BookId);\r\n    this.setState({\r\n      id: book.id,\r\n      title: book.title,\r\n      author: book.author\r\n    });\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const newBook = {\r\n      id: this.state.id,\r\n      title: this.state.title,\r\n      author: this.state.author\r\n    };\r\n    update(newBook);\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(\"rerendered!!\");\r\n    return (\r\n      <div>\r\n        <br />\r\n        <Link className=\"btn grey\" to=\"/\">\r\n          Back\r\n        </Link>\r\n        <h1 className=\"edit-header\">Update Book</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={this.state.title}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <label className=\"active\" htmlFor=\"title\">\r\n              Book Title\r\n            </label>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"author\"\r\n              value={this.state.author}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <label className=\"active\" htmlFor=\"author\">\r\n              Book Author\r\n            </label>\r\n          </div>\r\n          <input type=\"submit\" value=\"Save\" className=\"btn\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditBook;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Books from \"./Books\";\r\nimport BookDetails from \"./BookDetails\";\r\nimport AddBook from \"./AddBook\";\r\nimport EditBook from \"./EditBook\";\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Books} />\r\n      <Route exact path=\"/books/add\" component={AddBook} />\r\n      <Route exact path=\"/books/edit/:id\" component={EditBook} />\r\n      <Route exact path=\"/books/:id\" component={BookDetails} />\r\n      <Route component={Books} />\r\n    </Switch>\r\n  </main>\r\n);\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <nav className=\"light-blue darken-4\">\r\n        <div className=\"container\">\r\n          <Link className=\"brand-logo center\" to=\"/\">\r\n            Books\r\n          </Link>\r\n          <ul className=\"right\">\r\n            <li>\r\n              <Link to=\"/Books/add\">Add Book</Link>\r\n            </li>\r\n            <li>\r\n              <Link className=\"hide-on-small-only\" to=\"/\">\r\n                Books\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\n\nconst App = () => (\n  <div>\n    <Navbar />\n    <div className=\"container\">\n      <Main />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// for gh-pages deployment use HashRouter instead of BrowserRouter!\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}